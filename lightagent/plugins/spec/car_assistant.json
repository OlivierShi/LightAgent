{
    "name": "car_assistant",
    "description": "The car assistant is a versatile tool designed to facilitate a wide range of tasks on a car to improve the driving experience.",
    "trigger_instruction": "\n  *When a user wants to navigate to a location, invoke {\"tool\":\"car_assistant\"};\n  *When a user wants to set the temperature, invoke {\"tool\":\"car_assistant\"};\n  *When a user wants to find parking, invoke {\"tool\":\"car_assistant\"};\n  *When a user wants to control the lighting, invoke {\"tool\":\"car_assistant\"};\n  *When a user wants to adjust the windows, invoke {\"tool\":\"car_assistant\"};\n  *When a user wants to play music, invoke {\"tool\":\"car_assistant\"};\n  *When a user wants to adjust the volume, invoke {\"tool\":\"car_assistant\"};\n  *When a user needs to contact emergency services, invoke {\"tool\":\"car_assistant\"};",
    "response_instruction": "I support Car AI Assistant application, including navigate to a location, set the temperature, find parking, control the lighting, adjust the windows, play music, adjust the volume, and contact emergency services.",
    "functions": [
        {
            "name": "navigate_to",
            "description": "Helps the user to navigate to a specified location using GPS.",
            "trigger_instruction": "\n  *When a user wants to navigate to a location, invoke {\"tool\":\"navigate_to\"};",
            "response_instruction": "I have started navigation to the specified location.",
            "parameters": [
                {
                    "name": "location",
                    "type": "string",
                    "required": true,
                    "description": "The location to navigate to"
                }
            ]
        },
        {
            "name": "set_temperature",
            "description": "Sets the temperature in the car to a specified value.",
            "trigger_instruction": "\n  *When a user wants to set the temperature, invoke {\"tool\":\"set_temperature\"};",
            "response_instruction": "I have set the temperature to the specified value.",
            "parameters": [
                {
                    "name": "temperature",
                    "type": "integer",
                    "required": true,
                    "description": "The temperature to set in the car"
                }
            ]
        },
        {
            "name": "find_parking",
            "description": "Helps the user to find a parking spot near their current location.",
            "trigger_instruction": "\n  *When a user wants to find parking, invoke {\"tool\":\"find_parking\"};",
            "response_instruction": "I have found a parking spot near your current location.",
            "parameters": [
                {
                    "name": "radius",
                    "type": "integer",
                    "required": false,
                    "description": "The search radius for parking spots in meters"
                }
            ]
        },
        {
            "name": "control_lighting",
            "description": "Controls the lighting in the car, such as turning on or off the interior lights.",
            "trigger_instruction": "\n  *When a user wants to control the lighting, invoke {\"tool\":\"control_lighting\"};",
            "response_instruction": "I have adjusted the lighting in the car.",
            "parameters": [
                {
                    "name": "state",
                    "type": "boolean",
                    "required": true,
                    "description": "The desired state of the lighting, either true (on) or false (off)"
                },
                {
                    "name": "light_type",
                    "type": "string",
                    "required": false,
                    "description": "The type of lighting to control, such as interior lights, headlights, etc."
                }
            ]
        },
        {
            "name": "adjust_windows",
            "description": "Adjusts the windows in the car, such as rolling them up or down.",
            "trigger_instruction": "\n  *When a user wants to adjust the windows, invoke {\"tool\":\"adjust_windows\"};",
            "response_instruction": "I have adjusted the windows in the car.",
            "parameters": [
                {
                    "name": "state",
                    "type": "boolean",
                    "required": true,
                    "description": "The desired state of the windows, either true (up) or false (down)"
                },
                {
                    "name": "window_type",
                    "type": "string",
                    "required": false,
                    "description": "The type of window to adjust, such as driver side, passenger side, etc."
                }
            ]
        },
        {
            "name": "play_music",
            "description": "Plays music on the user's phone.",
            "trigger_instruction": "\n  *When a user wants to play music, invoke {\"tool\":\"play_music\"};",
            "response_instruction": "I have started playing music.",
            "parameters": [
                {
                    "name": "query",
                    "type": "string",
                    "required": false,
                    "description": "A search query to find the music to play, such as a song title, artist name, or playlist name."
                }
            ]
        },
        {
            "name": "adjust_volume",
            "description": "Adjusts the volume of the user's phone.",
            "trigger_instruction": "\n  *When a user wants to adjust the volume, invoke {\"tool\":\"adjust_volume\"};",
            "response_instruction": "I have adjusted the volume of the phone.",
            "parameters": [
                {
                    "name": "level",
                    "type": "integer",
                    "required": false,
                    "description": "The level of brightness to set, ranging from 0 to 100.",
                    "example": 50
                },
                {
                    "name": "rate",
                    "type": "float",
                    "required": false,
                    "description": "The rate of brightness adjustment, ranging from 0 to 1.",
                    "example": 0.5
                },                
                {
                    "name": "direction",
                    "type": "string",
                    "required": true,
                    "description": "Direction of the brightness adjustment, value should be \"increase\" or \"decrease\".",
                    "example": "increase"
                }
            ]
        },
        {
            "name": "ces",
            "description": "Contacts emergency services (ces) in case of an emergency.",
            "trigger_instruction": "\n  *When a user needs to contact emergency services, invoke {\"tool\":\"ces\"};",
            "response_instruction": "I have contacted emergency services.",
            "parameters": []
        }
    ],
    "examples": {
        "tool_detection": "<assistant>Detection started.\n## Conversation History\n<user>Do you hate me?\n<assistant>Sorry, i don't understand and cannot help with that.\n<user>please open the driver-side window.\n## Completed Inner Tool Invocation Results\n\n## Predicting Tool Invocation Response\n<user>please open the driver-side window.\n<assistant>{\"tool\":\"car_assistant\"}\n<assistant>Thoughts: I must invoke {\"tool\":\"car_assistant\"} to assist users open the driver-side window.\n<assistant>Detection ended.",
        "function_detection": "<user>please open the driver-side window.\n<assistant>{\"tool\":\"adjust_windows\"}\n<assistant>Thoughts: I must invoke {\"tool\":\"adjust_windows\"} to assist in opening the driver-side window.",
        "parameters_extraction": "<user>please open the driver-side window.\n<assistant>{\"window_type\": \"driver_side\", \"state\": true}\n<assistant>Thoughts: User is asking for opening the driver-side window, the parameter is {\"window_type\": \"driver_side\", \"state\": true}",
        "response": ""
    }
}